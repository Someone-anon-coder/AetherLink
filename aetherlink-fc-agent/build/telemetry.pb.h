// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2eproto;
class AetherLinkTelemetry;
class AetherLinkTelemetryDefaultTypeInternal;
extern AetherLinkTelemetryDefaultTypeInternal _AetherLinkTelemetry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AetherLinkTelemetry* Arena::CreateMaybeMessage<::AetherLinkTelemetry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AetherLinkTelemetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AetherLinkTelemetry) */ {
 public:
  inline AetherLinkTelemetry() : AetherLinkTelemetry(nullptr) {};
  virtual ~AetherLinkTelemetry();

  AetherLinkTelemetry(const AetherLinkTelemetry& from);
  AetherLinkTelemetry(AetherLinkTelemetry&& from) noexcept
    : AetherLinkTelemetry() {
    *this = ::std::move(from);
  }

  inline AetherLinkTelemetry& operator=(const AetherLinkTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline AetherLinkTelemetry& operator=(AetherLinkTelemetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AetherLinkTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AetherLinkTelemetry* internal_default_instance() {
    return reinterpret_cast<const AetherLinkTelemetry*>(
               &_AetherLinkTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AetherLinkTelemetry& a, AetherLinkTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(AetherLinkTelemetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AetherLinkTelemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AetherLinkTelemetry* New() const final {
    return CreateMaybeMessage<AetherLinkTelemetry>(nullptr);
  }

  AetherLinkTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AetherLinkTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AetherLinkTelemetry& from);
  void MergeFrom(const AetherLinkTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AetherLinkTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AetherLinkTelemetry";
  }
  protected:
  explicit AetherLinkTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2eproto);
    return ::descriptor_table_telemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kLatitudeDegFieldNumber = 4,
    kYawDegFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 6,
    kLongitudeDegFieldNumber = 5,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);
  private:
  float _internal_roll_deg() const;
  void _internal_set_roll_deg(float value);
  public:

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);
  private:
  float _internal_pitch_deg() const;
  void _internal_set_pitch_deg(float value);
  public:

  // double latitude_deg = 4;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // float relative_altitude_m = 6;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // double longitude_deg = 5;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:AetherLinkTelemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float roll_deg_;
  float pitch_deg_;
  double latitude_deg_;
  float yaw_deg_;
  float relative_altitude_m_;
  double longitude_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AetherLinkTelemetry

// float roll_deg = 1;
inline void AetherLinkTelemetry::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float AetherLinkTelemetry::_internal_roll_deg() const {
  return roll_deg_;
}
inline float AetherLinkTelemetry::roll_deg() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.roll_deg)
  return _internal_roll_deg();
}
inline void AetherLinkTelemetry::_internal_set_roll_deg(float value) {
  
  roll_deg_ = value;
}
inline void AetherLinkTelemetry::set_roll_deg(float value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.roll_deg)
}

// float pitch_deg = 2;
inline void AetherLinkTelemetry::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float AetherLinkTelemetry::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline float AetherLinkTelemetry::pitch_deg() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.pitch_deg)
  return _internal_pitch_deg();
}
inline void AetherLinkTelemetry::_internal_set_pitch_deg(float value) {
  
  pitch_deg_ = value;
}
inline void AetherLinkTelemetry::set_pitch_deg(float value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.pitch_deg)
}

// float yaw_deg = 3;
inline void AetherLinkTelemetry::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float AetherLinkTelemetry::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float AetherLinkTelemetry::yaw_deg() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.yaw_deg)
  return _internal_yaw_deg();
}
inline void AetherLinkTelemetry::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void AetherLinkTelemetry::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.yaw_deg)
}

// double latitude_deg = 4;
inline void AetherLinkTelemetry::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double AetherLinkTelemetry::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double AetherLinkTelemetry::latitude_deg() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.latitude_deg)
  return _internal_latitude_deg();
}
inline void AetherLinkTelemetry::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void AetherLinkTelemetry::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.latitude_deg)
}

// double longitude_deg = 5;
inline void AetherLinkTelemetry::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double AetherLinkTelemetry::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double AetherLinkTelemetry::longitude_deg() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.longitude_deg)
  return _internal_longitude_deg();
}
inline void AetherLinkTelemetry::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void AetherLinkTelemetry::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.longitude_deg)
}

// float relative_altitude_m = 6;
inline void AetherLinkTelemetry::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float AetherLinkTelemetry::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float AetherLinkTelemetry::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:AetherLinkTelemetry.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void AetherLinkTelemetry::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void AetherLinkTelemetry::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:AetherLinkTelemetry.relative_altitude_m)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_2eproto
